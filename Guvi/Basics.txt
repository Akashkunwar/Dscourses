
   _______________   BASICS SOLUTION USING PYTHON __________________

1.) Given a number N, print 'yes' if it is composite else print 'no'.
Sample Testcase :
INPUT
123
OUTPUT
yes

____________________

n=int(input())
factor=0
for i in range(1,n):
  if n%i==0:
    factor=i
if factor>1:
  print ('yes')
elif n==1:
  print ('no')
else:
  print ('no')

_________________________________________________________

2.) Given 3 numbers N , L and R. Print 'yes' if N is between L and R else print 'no'.
Sample Testcase :
INPUT
3
2 6
OUTPUT
yes

____________________

a = int(input())
b,c = map(int, input().split(" "))
if (a>b and a<c):
  print("yes")
else:
  print("no")

___________________________________________________________

3.) Write a code to get an integer N and print values from 1 till N in a separate line.

Input Description:
A single line contains an integer N.

Output Description:
Print the values from 1 to N in a separate line.

Sample Input :
5
Sample Output :
1
2
3
4
5

_____________________

n=int(input())
m = n+1
for x in range(1,m):
  print(x)

_____________________________________________________________

4.) Find the minimum among 10 numbers.
Sample Testcase :
INPUT
5 4 3 2 1 7 6 10 8 9
OUTPUT
1

__________________________

a,b,c,d,e,f,g,h,i,j = map(int, input().split(" "))
k = [a,b,c,d,e,f,g,h,i,j]
print(min(k))

____________________________________________________________

5.) Write a code to get the input and print it 5 times.

Input Description:
A single line contains an integer N.

Output Description:
Output contains 5 lines with each line having the value N.

Sample Input :
4
Sample Output :
4
4
4
4
4

__________________________

n = int(input())
print(n)
print(n)
print(n)
print(n)
print(n)

_______________________________________________________________________

6.) Write a program to print the sum of the first K natural numbers.
Input Size : n <= 100000
Sample Testcase :
INPUT
3
OUTPUT
6
___________________________

a = []
b=int(input())
for x in range(b+1):
  a.append(x)
print(sum(a))

_______________________________________________________________________

7.) Write a code to get an integer N and print the even values from 1 till N in a separate line.

Input Description:
A single line contains an integer N.

Output Description:
Print the even values from 1 to N in a separate line.

Sample Input :
6
Sample Output :
2
4
6

______________________________

n=int(input())
m = n+1
for x in range(2,m,2):
  print(x)

________________________________________________________________________

8.) Given 2 numbers N,M. Print 'yes' if their product is a perfect square else print 'no'.
Sample Testcase :
INPUT
5 5
OUTPUT
yes
_______________________________

import math
 
 
def isPerfectSquare(x):
    if(x >= 0):
        sr = int(math.sqrt(x))
        return ((sr*sr) == x)
    return false
a,b = map(int, input().split(" "))
x=a*b
if (isPerfectSquare(x)):
    print("yes")
else:
    print("no")

_________________________________________________________________________

9.) Write a code to get an integer N and print the sum of  values from 1 to N.

Input Description:
A single line contains an integer N.

Output Description:
Print the sum of values from 1 to N.

Sample Input :
10
Sample Output :
55

______________________________

n=int(input())
print(sum(range(1,n+1)))

________________________________________________________________________

10.) Given numbers A,B find A^B.
Input Size : 1 <= A <= 5 <= B <= 50
Sample Testcase :
INPUT
3 4
OUTPUT
81

____________________________________

a,b = map(int,input().split())
print(a**b)

__________________________________________________________________

11.) Write a code to get an integer N and print the values from N to 1.

Input Description:
A single line contains an integer N.

Output Description:
Print the values from N to 1 in a separate line.

Sample Input :
10
Sample Output :
10
9
8
7
6
5
4
3
2
1

____________________________

a = 1
n = int(input())
while n >= a:
  print(n)
  n = n-1

____________________________________________________________________

12.) Write a code to get an integer N and print the digits of the integer.

Input Description:
A single line contains an integer N.

Output Description:
Print the digits of the integer in a single line separated by space,

Sample Input :
348
Sample Output :
3 4 8

_____________________________

a = int(input())
b = str(a)
c = []
for x in b:
  c.append(x)
d = map(int,c)
d = list(d)
e = ''.join(str(d).split(","))
res = str(e)[1:-1]
print(res)

________________________________________________________________

13.) Write a code to get a integer n as input and calculate the smallest perfect power of 2 greater than n.

Input Description:
A single line containing an integer,n.

Output Description:
Print the smallest perfect power of 2 greater than n.

Sample Input :
48
Sample Output :
64

_________________________________

def perfectPowerOf2( n ):
	per_pow = 1
	while n > 0:
		per_pow = per_pow << 1
		n = n >> 1
	return per_pow
n = int(input())
print(perfectPowerOf2(n))

_________________________________________________________________

14.) Given base(B) and height(H) of a triangle find its area.
Input Size : N <= 1000000
Sample Testcase :
INPUT
2 4
OUTPUT
4
_____________________________________

a,b = map(int, input().split(" "))
area_tran = .5*(a*b)
print(area_tran)

__________________________________________________________________

15.) Given an array of N elements switch(swap) the element with the adjacent element and print the output.
Sample Testcase :
INPUT
5
3 2 1 2 3
OUTPUT
2 3 2 1 3

_____________________________________

a = input()
data = [int(i) for i in input().split(" ")]
i = 0
while i < data.__len__() - 1:
    t = data[i]
    data[i] = data[i + 1]
    data[i + 1] = t
    i = i + 2
print(*data)

_____________________________________________________________________

16.) Kabali is a brave warrior who with his group of young ninjas moves from one place to another to fight against his opponents. Before Fighting he just calculates one thing, the difference between his ninja number and the opponent's ninja number. From this difference he decides whether to fight or not. Kabali's ninja number is never greater than his opponent.
Input
The input contains two numbers in every line. These two numbers in each line denotes the number ninjas in Kabali's clan and his opponent's clan . print the absolute difference of number of ninjas between Kabali's clan and his opponent's clan. Each output should be in seperate line.
Sample Testcase :

INPUT
100 200

OUTPUT
100

_______________________________

a,b=map(int,input().split(" "))
print(b-a)

______________________________________________________________________

17.) Given a number N and an array of N elements, find the Bitwise OR of the array elements.
Input Size : N <= 100000
Sample Testcase :
INPUT
2
2 4
OUTPUT
6
______________________________

from functools import reduce
a = input()
test_list = [int(i) for i in input().split(" ")]
res = reduce(lambda x, y: x | y, test_list)
print(str(res))

_____________________________________________________________________

18.) Given 2 numbers N and K followed by N elements,print the number of repetition of K otherwise print '-1' if the element not found.
Sample Testcase :
INPUT
6 2
1 2 3 5 7 8
OUTPUT
0
_____________________________

a,b = map(int,input().split(" "))
n = [int(i) for i in input().split(" ")]
m = n.count(b)
if b in n:
  print(m-1)
else:
  print(-1)

__________________________________________________________________

19.) Given 3 numbers A,B,C process and print 'yes' if they can form the sides of a triangle otherwise print 'no'.
Input Size : A,B,C <= 100000
Sample Testcase :
INPUT
3 4 5
OUTPUT
yes
_____________________________

a,b,c = map(int, input().split())
if (a+b>c and b+c>a and c+a>b):
  print("yes")
else:
  print("no")

__________________________________________________________________

20.) Given a string 'S' swap the even and odd characters starting from index 1(Assume the index starts from 0).
Input Size : |s| <= 10000000(complexity O(n))
Sample Testcase :
INPUT
codekata
OUTPUT
ocedakat
____________________________

a = input()
output = ''
i = 0
while i < len(a):
        if i + 1 < len(a):
                output = output + a[i + 1]
                output = output + a[i]
        i = i + 2
print(output)

_________________________________________________________________

21.) Given 2 numbers N,M find the GCD of N and M.If it cannot be found for given number(s) then print -1
Sample Testcase :
INPUT
10 5
OUTPUT
5
_____________________________

a,b = map(int, input().split(" "))
import numpy as np
if (a==0 or b==0):
    print(-1)
else:
    c = np.gcd(a,b)
    print(c)

__________________________________________________________________

22.) Write a code to get 2 integers A and N. Print the integer A, N times in separate line.

Input Description:
First line contains an integer A. Second line contains an Integer N.

Output Description:
Print the integer A, N times in a separate line.

Sample Input :
2 3
Sample Output :
2
2
2
____________________________________

m, n = map(int, input().split())
for line in range(n):
  print(m)

_________________________________________________________________

23.) Given 3 numbers A,B,C print 'yes' if they can form the sides of a scalene triangle else print 'no'.
Input Size : A,B,C <= 100000
Sample Testcase :
INPUT
3 4 5
OUTPUT
yes
____________________________________

a,b,c = map(int, input().split(" "))
if (a!=b and b!=c and c!=a):
  print("yes")
else:
  print("no")

__________________________________________________________________

24.) Write a code to get 2 integers as input and add the integers without any carry.

Input Description:
A single line containing 2 integers.

Output Description:
Print sum of the 2 integers without carry

Sample Input :
44 66
Sample Output :
0
__________________________________

import math
def xSum(n, m) :
	res = 0
	multiplier = 1
	bit_sum = 0
	while (n or m) :
		bit_sum = ((n % 10) +
				(m % 10))
		bit_sum = bit_sum % 10
		res = (bit_sum *
			multiplier) + res
		n = math.floor(n / 10)
		m = math.floor(m / 10)
		multiplier = multiplier * 10
	return res
n,m = map(int, input().split(" "))
print (xSum(n, m))

______________________________________________________________________

25.) Let P represent Paper, R represent Rock and S represent Scissors. Given 2 out of the 3 determine which one wins. If its a draw print 'D'.
Sample Testcase :
INPUT
R P
OUTPUT
P
_____________________________

a,b = map(str, input().split(" "))
if a=="R" and b=="P":
  print("P")
elif a=="P" and b=="S":
  print("S")
elif a=="R" and b=="S":
  print("D")
elif a=="P" and b=="R":
  print("P")
elif a=="S" and b=="P":
  print("S")
elif a=="S" and b=="R":
  print("R")
else:
  print("D")

_______________________________________________________________________________

26.) Given 2 numbers N and M add both the numbers and check whether the sum is odd or even.
Sample Testcase :
INPUT
9 2
OUTPUT
odd
_____________________________________

a,b = map(int, input().split(" "))
c = a+b
if c%2==0:
    print("even")
else:
    print("odd")

_______________________________________________________________________________

27.) Given a string S consisting of 2 words reverse the order of two words .
Input Size : |S| <= 10000000
Sample Testcase :
INPUT
hello world
OUTPUT
world hello
_____________________________________

a,b = map(str, input().split(" "))
print(b, a)

_______________________________________________________________________________

28.) Given a range of 2 numbers (i.e) L and R count the number of prime numbers in the range (inclusive of L and R ).
Input Size : L <= R <= 100000(complexity O(n) read about Sieve of Eratosthenes)
Sample Testcase :
INPUT
2 5
OUTPUT
3
_____________________________________

lower,upper = map(int, input().split(" "))
count = 0
for num in range (lower, upper+1):
 if num>1:
  for i in range (2,num):
   if num % i==0:
    break
  else: 
    count += 1
print (count)

_______________________________________________________________________________

29.) Write a code get an integer number as input and print the sum of the digits.

Input Description:
A single line containing an integer.

Output Description:
Print the sum of the digits of the integer.

Sample Input :
124
Sample Output :
7
_____________________________________

a = int(input())
b = str(a)
c = []
for x in b:
  c.append(x)
d = map(int,c)
d = list(d)
print(sum(d))

_________________________________________________________________________________

30.) Write a program to get a string as input and reverse the string without using temporary variable.

Input Description:
A single line containing a string.

Output Description:
Print the reversed string.

Sample Input :
GUVI
Sample Output :
IVUG
_____________________________________

a = input()[::-1]
print(a)

__________________________________________________________________________________

31.) Given 3 numbers A,B,C print 'yes' if they can form the sides of a right angled triangle,otherwise 'no'.
Input Size : A,B,C <= 100000
Sample Testcase :
INPUT
3 4 5
OUTPUT
yes

____________________________________

a,b,c = map(int, input().split())
if (a**2+b**2==c**2 or b**2+c**2==a**2 or c**2+a**2==b**2):
  print("yes")
else:
  print("no")

_________________________________________________________________________________

32.) Write a code get an integer number as input and print the odd and even digits of the number separately.

Input Description:
A single line containing an integer.

Output Description:
Print the even and odd integers of the integer in a separate line.

Sample Input :
1234
Sample Output :
2 4
1 3

____________________________________

s=input()
l=[int(i) for i in s]
# print(l)
even = []
odd = []
for j in l:
  if j%2==0:
    even.append(j)
  else:
    odd.append(j)
print(" ".join(str(x) for x in sorted(even)))
print(" ".join(str(x) for x in sorted(odd)))

________________________________________________________________________________________

33.) Check whether the given 4 points form a square or not.
Example:
INPUT
10 10
10 20
20 20
20 10
OUTPUT
yes
________________________________________

class Point:
	
	def __init__(self, x, y):
		self.x = x
		self.y = y

def distSq(p, q):
	return (p.x - q.x) * (p.x - q.x) +\
		(p.y - q.y) * (p.y - q.y)

def isSquare(p1, p2, p3, p4):

	d2 = distSq(p1, p2) 
	d3 = distSq(p1, p3) 
	d4 = distSq(p1, p4) 
	if d2 == 0 or d3 == 0 or d4 == 0:
		return False

	if d2 == d3 and 2 * d2 == d4 and \
					2 * distSq(p2, p4) == distSq(p2, p3):
		return True

	if d3 == d4 and 2 * d3 == d2 and \
					2 * distSq(p3, p2) == distSq(p3, p4):
		return True

	if d2 == d4 and 2 * d2 == d3 and \
					2 * distSq(p2, p3) == distSq(p2, p4):
		return True

	return False

a,b = map(int, input().split(" "))
c,d = map(int, input().split(" "))
e,f = map(int, input().split(" "))
g,h = map(int, input().split(" "))
if __name__=="__main__":
	p1 = Point(a, b)
	p2 = Point(c, d)
	p3 = Point(e, f)
	p4 = Point(g, h)
	
	if isSquare(p1, p2, p3, p4):
		print('yes')
	else:
		print('no')

______________________________________________________________________________

34.) Given a number N, print the Bitwise NOT of that number.
Input Size : 1 <= N <= 10000
Sample Testcase :
INPUT
5
OUTPUT
-6
______________________________________

a = int(input())
print(~a)

______________________________________________________________________________

35.) Given a number N followed by N numbers.Find the smallest number and largest number and print both the indices(1 based indexing).
Input Size : N <= 100000
Sample Testcase :
INPUT
5
1 2 3 4 5
OUTPUT
1 5
______________________________________

b=input()
a=list(map(int, input().split(" ")))
min=min(a)
max=max(a)
print(a.index(min)+1,a.index(max)+1)

_______________________________________________________________________________

36.) Write a code to get 2 integers as input and find the HCF of the 2 integer without using recursion or Euclidean algorithm.

Input Description:
A single line containing 2 integers separated by space.

Output Description:
Print the HCF of the integers.

Sample Input :
2 3
Sample Output :
1
_______________________________________

a,b = map(int, input().split(" "))
import numpy as np
c = np.gcd(a,b)
print(c)

_______________________________________________________________________________

37.) Given 2 numbers N and K followed by elements of N .Print 'yes' if K exists else print 'no'.
Sample Testcase :
INPUT
4 2
1 2 3 3
OUTPUT
yes
_____________________________________

a,b = map(int,input().split(" "))
n = [int(i) for i in input().split(" ")]
if b in n:
  print("yes")
else:
  print("no")

________________________________________________________________________________

38.) Given a list of N coins, their values (V1, V2, … , VN), and the total sum S. Find the minimum number of coins the sum of which is S (we can use as many coins of one type as we want), if it is not possible to select coins in such a way that they sum up to S then print '-1'.
Example: Given coins with values 1, 3, and 5. And the sum S is 11.
Output: 3, 2 coins of 3 and 1 coin of 5
Input Size : N<=10000
Example:
INPUT
3 11
1 3 5
OUTPUT
3

_____________________________________

import sys
def minCoins(coins, m, V):
	if (V == 0):
		return 0
	res = sys.maxsize
	for i in range(0, m):
		if (coins[i] <= V):
			sub_res = minCoins(coins, m, V-coins[i])
			if (sub_res != sys.maxsize and sub_res + 1 < res):
				res = sub_res + 1
	return res
u,V = map(int,input().split(" "))
coins = [int(i) for i in input().split(" ")]
m = len(coins)
print("Minimum coins required is",minCoins(coins, m, V))

_____________________________________________________________________________

39.) The Caesar Cipher technique is one of the earliest and simplest method of encryption technique. It’s simply a type of substitution cipher, i.e., each letter of a given text is replaced by a letter some fixed number of positions down the alphabet. For example with a shift of 1, A would be replaced by B, B would become C, and so on. The method is apparently named after Julius Caesar, who apparently used it to communicate with his officials.For the given input string(S) and shift print the encrypted string.
Sample Testcase :
INPUT
ABCdEFGHIJKLMNOPQRSTUVWXYz 23
OUTPUT
XYZaBCDEFGHIJKLMNOPQRSTUVw
______________________________________________

def encrypt(text,s):
	result = ""
	for i in range(len(text)):
		char = text[i]
		if (char.isupper()):
			result += chr((ord(char) + s-65) % 26 + 65)
		else:
			result += chr((ord(char) + s - 97) % 26 + 97)
	return result
text,s1 = map(str, input().split(" "))
s = int(s1)
print (encrypt(text,s))

____________________________________________________________________________


40.) The Romans have attacked again. This time they are much more than the Persians but Shapur is ready to defeat them. He says: 'A lion is never afraid of a hundred sheep'.

Nevertheless Shapur has to find weaknesses in the Roman army to defeat them. So he gives the army a weakness number.

In Shapur's opinion the weakness of an army is equal to the number of triplets i, j, k such that i < j < k and ai > aj > ak where ax is the power of man standing at position x. The Roman army has one special trait — powers of all the people in it are distinct.

Help Shapur find out how weak the Romans are.

The first line of input contains a single number n, the number of men in Roman army. Next line contains n different positive integers powers of men in the Roman army.
Input Size : N<=100000
Example:
INPUT
3
3 2 1
OUTPUT
1
_____________________________________





++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++